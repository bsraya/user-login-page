import Head from 'next/head'
import { Inter } from 'next/font/google'
import { Formik, Field, Form } from 'formik'
import {
  Flex,
  Input,
  Button,
  Heading,
  Container,
  FormControl,
  FormLabel,
  FormErrorMessage,
} from '@chakra-ui/react'

const inter = Inter({ subsets: ['latin'] })

export default function Home() {
  function validateEmail(email: string) {
    let error: string | undefined
    if (!email) {
      error = 'Required'
    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i.test(email)) {
      error = 'Invalid email address'
    }
    return error
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={inter.className}>
        <Flex width={"100vw"} height={"100vh"} alignContent={"center"} justifyContent={"center"}>
          <Container maxWidth="container.md" marginTop="auto" marginBottom="auto" justifyContent={"center"} alignContent={"center"} textAlign={"center"}>
            <Heading as="h1" size="2xl" marginBottom="1rem">Login Page</Heading>
            <Formik
              initialValues={{ email: '' }}
              onSubmit={(values, actions) => {
                setTimeout(() => {
                  alert(JSON.stringify(values, null, 2))
                  actions.setSubmitting(false)
                }, 1000)
              }}
            >
              {(props) => (
                <Form style={{ border: '1px solid #e2e8f0', padding: '1rem' }}>
                  <Field name='email' validate={validateEmail}>
                    {({ field, form }: { field: any, form: any }) => (
                      <FormControl isInvalid={form.errors.email && form.touched.email}>
                        <FormLabel htmlFor='email'>Email</FormLabel>
                        <Input {...field} id='email' placeholder='email' />
                        <FormErrorMessage>{form.errors.email}</FormErrorMessage>
                      </FormControl>
                    )}
                  </Field>
                  <Button
                    mt={4}
                    colorScheme='teal'
                    isLoading={props.isSubmitting}
                    type='submit'
                  >
                    Submit
                  </Button>
                </Form>
              )}
              </Formik>
            </Container>
          </Flex>
      </main>
    </>
  )
}
